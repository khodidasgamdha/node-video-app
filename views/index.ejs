<!DOCTYPE html>
<html>
  <head>
    <title>1:1 Voice Call App</title>
  </head>
  <body>
    <h1>1:1 Voice Call App</h1>
    <div>
      <video id="localVideo" autoplays></video>
      <video id="remoteVideo" autoplay></video>
    </div>
    <div>
      <textarea id="messageInput" placeholder="Type a message"></textarea>
      <button id="sendMessageBtn">Send</button>
    </div>
    <script src="/socket.io/socket.io.js"></script>
    <script>
      const socket = io();
      const localVideo = document.querySelector("#localVideo");
      const remoteVideo = document.querySelector("#remoteVideo");
      const messageInput = document.querySelector("#messageInput");
      const sendMessageBtn = document.querySelector("#sendMessageBtn");

      const constraints = {
        video: true,
        audio: true,
      };

      let localStream;
      let peerConnection;

      navigator.mediaDevices
        .getUserMedia(constraints)
        .then((stream) => {
          localStream = stream;
          localVideo.srcObject = stream;
        })
        .catch((error) => {
          console.error("Error getting user media:", error);
        });

      function createPeerConnection() {
        peerConnection = new RTCPeerConnection({
          iceServers: [
            {
              urls: "stun:stun.l.google.com:19302",
            },
          ],
        });

        peerConnection.onicecandidate = (event) => {
          if (event.candidate) {
            console.log("sending ice candidate");
            socket.emit("ice-candidate", event.candidate);
          }
        };

        peerConnection.ontrack = (event) => {
          console.log("received remote stream");
          remoteVideo.srcObject = event.streams[0];
        };

        peerConnection.addTrack(localStream.getAudioTracks()[0], localStream);
      }

      socket.on("user-connected", (userId) => {
        console.log("user connected:", userId);

        createPeerConnection();

        peerConnection
          .createOffer()
          .then((offer) => {
            console.log("sending local description:", offer);
            return peerConnection.setLocalDescription(offer);
          })
          .then(() => {
            console.log("sending offer to remote peer");
            socket.emit("offer", peerConnection.localDescription, userId);
          })
          .catch((error) => {
            console.error("Error creating offer:", error);
          });
      });

      socket.on("offer", (description, userId) => {
        console.log("received offer from remote peer:", description);

        createPeerConnection();

        peerConnection
          .setRemoteDescription(description)
          .then(() => {
            console.log("creating answer");
            return peerConnection.createAnswer();
          })
          .then((answer) => {
            console.log("sending local description:", answer);
            return peerConnection.setLocalDescription(answer);
          })
          .then(() => {
            console.log("sending answer to remote peer");
            socket.emit("answer", peerConnection.localDescription, userId);
          })
          .catch((error) => {
            console.error("Error creating or setting answer:", error);
          });
      });

      socket.on("answer", (description, userId) => {
        console.log("received answer from remote peer:", description);

        peerConnection
          .setRemoteDescription(description)
          .then(() => {
            console.log("set remote description");
          })
          .catch((error) => {
            console.error("Error setting remote description:", error);
          });
      });

      socket.on("ice-candidate", (candidate) => {
        console.log("received ice candidate:", candidate);

        peerConnection
          .addIceCandidate(candidate)
          .then(() => {
            console.log("added ice candidate");
          })
          .catch((error) => {
            console.error("Error adding ice candidate:", error);
          });
      });
    </script>
  </body>
</html>
